- if @response_set.participant.open?
  .row-fluid
    = render partial: 'participants/participant_progress', locals: { participant_state: @response_set.participant.stage, participant_steps: @response_set.participant.filled_states}
.well.nu-small.nu-well.text-center
  .nu-header.text-center
    = @response_set.participant.name << '\'s Survey'
- if @response_set.errors.any?
  .row-fluid
    %h2
      = "#{pluralize(@response_set.errors.count, "error")} prohibited this relationship from being saved:"
    %ul
      - @response_set.errors.full_messages.each do |msg|
        %li
          = msg
.row-fluid
  .span12
    = simple_form_for @response_set, html: { class: 'validate-form edit_response_set_form'} do |f|
      #survey-tabs.tabbable.tabs-left
        - if @survey.sections.size > 1
          %ul.nav.nav-tabs.span2#section_tab_header
            - @survey.sections.each_with_index do |s,si|
              %li{ class: "#{'active' if si == 0}" }
                = link_to s.title, "#section_#{s.id}", data: { toggle: 'tab' }
        .error-msg.offset2
        #survey-tab-content.tab-content.offset2
          - @response_set.survey.sections.each_with_index do |s,si|
            .tab-pane{ id: "section_#{s.id}", class: "#{'active' if si == 0}" }
              .row-fluid.section-title
                %h3
                  = s.title
              - s.questions.each_with_index do |q,i|
                .row-fluid
                  .span12
                    - input_id    = "q_#{q.id}".to_sym
                    - label_class = q.is_mandatory? ? 'label-required' : ''
                    - if q.pick_one?
                      - if q.answers.size > 7
                        .radio-inline
                          = f.input input_id, collection: q.answers, label_method: :text, value_method: :id, label: q.text, as: :radio_buttons, required: q.is_mandatory?, hint: q.help_text, label_html: { class: label_class }
                      - else
                        = f.input input_id, collection: q.answers, label_method: :text, value_method: :id, label: q.text, as: :radio_buttons,required: q.is_mandatory?, hint: q.help_text, label_html: { class: label_class }
                    - elsif q.pick_many?
                      = f.input input_id.to_sym, collection: q.answers, label_method: :text, value_method: :id, label: q.text, as: :check_boxes, required: q.is_mandatory?, hint: q.help_text, label_html: {class: label_class}
                    - elsif q.label?
                      %b
                        = q.text.html_safe
                    - else
                      - input_class = "#{'input-medium' if q.number?} #{'input-block-level'if q.long_text?} #{'input-small date' if q.true_date?} #{'birth-date' if q.birth_date?}"
                      = f.input input_id, label: q.text, as: Question::FORM_RESPONSE_TYPE_TRANSLATION[q.response_type].to_sym, required: q.is_mandatory?, hint: q.help_text, required_text: "true", input_html: { class: input_class, placeholder: "#{'MM/DD/YYYY' if q.true_date?}", rows: 3 }, label_html: { class: label_class }
                    %hr
              .btn-toolbar.row-fluid
                .span6
                  - unless si == 0
                    = button_tag class: 'btn btn-link previous-section', type: 'button' do
                      %i.icon-backward
                      Previous
                .span6
                  - if si == (@survey.sections.size - 1)
                    = button_tag 'Submit', value: 'finish', class: 'btn btn-success finish-section', data: {url: response_set_url(@response_set)}
                  - else
                    = button_tag 'Next', class: 'btn btn-primary nu-primary next-section', data: {url: response_set_url(@response_set)} do
                      Next
                      %i.icon-forward
